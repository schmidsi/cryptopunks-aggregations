interface Timeseries {
  id: Int8!
  timestamp: Int8!
}

type Assign @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  punkIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PunkTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  punkIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PunkOffered @entity(immutable: true) {
  id: Bytes!
  punkIndex: BigInt! # uint256
  minValue: BigInt! # uint256
  toAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PunkBidEntered @entity(immutable: true) {
  id: Bytes!
  punkIndex: BigInt! # uint256
  value: BigInt! # uint256
  fromAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PunkBidWithdrawn @entity(immutable: true) {
  id: Bytes!
  punkIndex: BigInt! # uint256
  value: BigInt! # uint256
  fromAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PunkBought @entity(timeseries: true) {
  id: Int8! # set by aggregation
  timestamp: Timestamp! # set by aggregation
  punkIndex: BigInt! # uint256
  value: BigInt! # uint256
  fromAddress: Bytes! # address
  toAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stats @aggregation(intervals: ["hour", "day"], source: "PunkBought") {
  id: Int8!
  timestamp: Timestamp!
  volume: BigInt! @aggregate(fn: "sum", arg: "value")
}

type PunkNoLongerForSale @entity(immutable: true) {
  id: Bytes!
  punkIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

